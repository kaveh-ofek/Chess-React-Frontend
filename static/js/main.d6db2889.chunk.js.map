{"version":3,"sources":["components/HeaderStyling.module.css","components/MainMenuButton.js","components/Header.js","pages/WelcomePage.js","components/PracticeSettingsForm.js","components/PracticeSettings.js","pages/PracticeSettingsPage.js","components/NewGameSettingsForm.js","components/NewGameSettings.js","pages/NewGameSettingsPage.js","components/Tile.js","pages/logic/PlayerSpecifier.js","pages/logic/Pair.js","pages/logic/Piece.js","pages/logic/PieceType.js","pages/logic/Bishop.js","pages/logic/King.js","pages/logic/Knight.js","pages/logic/Queen.js","pages/logic/Rook.js","pages/logic/Pawn.js","pages/logic/GameBoard.js","components/Board.js","pages/PracticePage.js","pages/NewGamePage.js","components/GitLinkedButtons.js","pages/AboutMePage.js","App.js","index.js"],"names":["module","exports","MainMenuButton","history","useHistory","className","onClick","push","style","verticalAlign","Header","classes","header","activeClassName","active","to","WelcomePage","color","size","PracticeSettingForm","useState","selectedSide","setSide","selectedTime","setTime","onSubmit","event","preventDefault","formData","side","time","console","log","pathname","state","id","target","backgroundColor","type","min","max","step","onChange","value","PracticeSettings","PracticeSettingsPage","NewGameSettingForm","selectedLevel","setLevel","level","NewGameSettings","NewGameSettingsForm","NewGameSettingsPage","Tile","props","number","src","img","alt","PlayerSpecifier","Pair","leftArgument","rightArgument","this","arrayForPair","otherPair","getLeft","getRight","Piece","newLocation","gameBoard","playerNumber","isPieceMoved","allPossibleMoves","possiblePieceMoves","i","length","get","isIdenticalPair","pieceAtLocation","getPieceFromLocation","removeFromPieceList","putNull","currentLocation","putPiece","newLocationPiece","PieceType","Bishop","locationToInsert","givenPlayerNumber","typeOfPiece","listOfAllPossibleMoves","leftCoordinate","rightCoordinate","nextPiece","getPlayerNumber","King","possibleLeftRightMoves","possibleUpDownMoves","leftRightMove","j","upDownMove","locationCheck","Knight","Queen","Rook","Pawn","pawnLocation","newPiece","window","prompt","removeOldPiece","addNewPiece","GameBoard","firstPlayerPieces","secondPlayerPieces","newPawn","player1LeftRook","player1RightRook","player1LeftKnight","player1RightKnight","player1LeftBishop","player1RightBishop","player1King","player1Queen","player2LeftRook","player2RightRook","player2LeftKnight","player2RightKnight","player2LeftBishop","player2RightBishop","player2King","player2Queen","givenLocation","givenPiece","remove","oldPiece","nowPlayingPlayerNumber","enemyPiecesArray","kingLocation","playerPiecesArray","getPlayerPieces","curPiece","constructor","name","getCurrentLocation","currentEnemyPiecePossibleMoves","counter","cols","rows","board","graphicBoard","image","PracticePage","location","parseInt","NewGamePage","GitLinkedButtons","position","left","top","transform","open","AboutMePage","App","path","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d6db2889.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"HeaderStyling_header__3Xvb0\",\"active\":\"HeaderStyling_active__3BDbi\"};","import \"./MainMenuButton.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\n\r\n\r\nconst MainMenuButton = () => {\r\n\r\n  const history = useHistory();\r\n\r\n  const handleNewGame = () => {\r\n    history.push(\"/newgame_settings\");\r\n  }\r\n\r\n  const handlePractice = () => {\r\n    history.push(\"/practice_settings\");\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"button-location\">\r\n        <button className=\"button\" onClick={handleNewGame} style={{ verticalAlign: \"middle\" }}>\r\n          <span>New Game </span> \r\n        </button>\r\n        <button className=\"button\" onClick={handlePractice} style={{ verticalAlign: \"middle\" }}>\r\n          <span>Practice </span>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainMenuButton;\r\n","import classes from \"./HeaderStyling.module.css\";\r\n\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className={classes.header}>\r\n            <nav>\r\n                <ul>\r\n                    <li>\r\n                        <NavLink activeClassName={classes.active} to='/welcome'>Menu</NavLink>\r\n                    </li>\r\n                    <li>\r\n                        <NavLink activeClassName={classes.active} to='/aboutme'>About Me</NavLink>\r\n                    </li>\r\n                </ul>\r\n            </nav>\r\n        </header>\r\n    )\r\n}\r\nexport default Header;","import MainMenuButton from \"../components/MainMenuButton\";\r\nimport \"../components/TitleStyling.css\";\r\nimport Header from \"../components/Header\";\r\nimport { FaChess } from \"react-icons/fa\";\r\n\r\nconst WelcomePage = () => {\r\n  return (\r\n    <div>\r\n      <Header></Header>\r\n      <div className=\"main-title\">Chess</div>\r\n      <div className=\"sub-title\">Made with Java and React.js</div>\r\n      <div className='chess-icon'><FaChess color=\"#e4e4e4\" size=\"6rem\" ></FaChess></div>\r\n      <MainMenuButton></MainMenuButton>\r\n    </div>\r\n  );\r\n};\r\nexport default WelcomePage;\r\n","import React, { useState } from \"react\";\r\nimport \"./SettingsForm.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { FaClock, FaChessKing } from \"react-icons/fa\";\r\n\r\nconst PracticeSettingForm = () => {\r\n  const history = useHistory();\r\n  const [selectedSide, setSide] = useState(\"\");\r\n  const [selectedTime, setTime] = useState(\"\");\r\n\r\n  const whiteSideChangeHandler = (event) => {\r\n    if (selectedSide === '')\r\n    {\r\n      event.target.style.backgroundColor = \"rgb(2, 48, 109)\"\r\n      setSide(\"1\");\r\n    }\r\n  };\r\n\r\n  const blackSideChangeHandler = (event) => {\r\n    if (selectedSide === '')\r\n    {\r\n      event.target.style.backgroundColor = \"rgb(2, 48, 109)\"\r\n      setSide(\"2\");\r\n    }\r\n  };\r\n\r\n  const timeChangeHandler = (event) => {\r\n    setTime(event.target.value);\r\n  };\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const formData = {\r\n      side: selectedSide,\r\n      time: selectedTime,\r\n    };\r\n    console.log(formData);\r\n    history.push({ pathname: \"/practice\", state: formData });\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <div className=\"new-settings__controls\">\r\n        <div className=\"new-settings__control\">\r\n          <div>Choose Your Side:</div>\r\n          <button id='white'\r\n            className=\"white-button\"\r\n            onClick={whiteSideChangeHandler} type='button'\r\n          >\r\n            <FaChessKing color=\"white\" size=\"2rem\"></FaChessKing>\r\n          </button>\r\n          <button id='black'\r\n            className=\"black-button\"\r\n            onClick={blackSideChangeHandler} type='button'\r\n          >\r\n            <FaChessKing color=\"black\" size=\"2rem\"></FaChessKing>\r\n          </button>\r\n        </div>\r\n\r\n        <div>\r\n          <div>\r\n            <FaClock color=\"#2c2c2c\" size=\"1.5rem\"></FaClock> Time: (1-10)\r\n          </div>\r\n          <input\r\n            type=\"range\"\r\n            min=\"1\"\r\n            max=\"10\"\r\n            step=\"1\"\r\n            onChange={timeChangeHandler}\r\n          ></input>\r\n        </div>\r\n      </div>\r\n      <div className=\"new-settings__actions\">\r\n        <button type=\"submit\">Start</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\nexport default PracticeSettingForm;\r\n","import React from 'react';\r\nimport \"./Settings.css\";\r\nimport PracticeSettingForm from './PracticeSettingsForm';\r\n\r\nconst PracticeSettings = () => {\r\n    return (\r\n        <div className='new-settings'>\r\n            <PracticeSettingForm></PracticeSettingForm>\r\n        </div>\r\n    )\r\n}\r\nexport default PracticeSettings;","import Header from \"../components/Header\";\r\nimport PracticeSettings from \"../components/PracticeSettings\";\r\n\r\nconst PracticeSettingsPage = () => {\r\n    return (\r\n        <div>\r\n            <Header></Header>\r\n            <PracticeSettings></PracticeSettings>\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default PracticeSettingsPage;","import React, { useState } from \"react\";\r\nimport \"./SettingsForm.css\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { FaClock, FaRobot, FaChessKing } from \"react-icons/fa\";\r\n\r\nconst NewGameSettingForm = () => {\r\n  const history = useHistory();\r\n  const [selectedSide, setSide] = useState(\"\");\r\n  const [selectedTime, setTime] = useState(\"\");\r\n  const [selectedLevel, setLevel] = useState(\"\");\r\n\r\n  const whiteSideChangeHandler = (event) => {\r\n    if (selectedSide === '')\r\n    {\r\n      event.target.style.backgroundColor = \"rgb(2, 48, 109)\"\r\n      setSide(\"1\");\r\n    }\r\n  };\r\n\r\n  const blackSideChangeHandler = (event) => {\r\n    if (selectedSide === '')\r\n    {\r\n      event.target.style.backgroundColor = \"rgb(2, 48, 109)\"\r\n      setSide(\"2\");\r\n    }\r\n  };\r\n\r\n  const timeChangeHandler = (event) => {\r\n    setTime(event.target.value);\r\n  };\r\n\r\n  const levelChangeHandler = (event) => {\r\n    setLevel(event.target.value);\r\n  };\r\n\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n\r\n    const formData = {\r\n      side: selectedSide,\r\n      time: selectedTime,\r\n      level: selectedLevel,\r\n    };\r\n    history.push({ pathname: \"/newgame\", state: formData });\r\n  };\r\n  return (\r\n    <form onSubmit={submitHandler}>\r\n      <div className=\"new-settings__controls\">\r\n        <div className=\"new-settings__control\">\r\n          <div>Choose Your Side:</div>\r\n          <button className=\"white-button\" onClick={whiteSideChangeHandler} type='button'>\r\n            <FaChessKing color=\"white\" size=\"2rem\"></FaChessKing>\r\n          </button>\r\n          <button className=\"black-button\" onClick={blackSideChangeHandler} type='button'>\r\n            <FaChessKing color=\"black\" size=\"2rem\"></FaChessKing>\r\n          </button>\r\n        </div>\r\n\r\n        <div>\r\n          <div>\r\n            <FaClock color=\"#2c2c2c\" size=\"1.5rem\"></FaClock> Time: (1-10)\r\n          </div>\r\n          <input\r\n            type=\"range\"\r\n            min=\"1\"\r\n            max=\"10\"\r\n            step=\"1\"\r\n            onChange={timeChangeHandler}\r\n          ></input>\r\n        </div>\r\n\r\n        <div>\r\n          <div>\r\n            <FaRobot color=\"#2c2c2c\" size=\"1.5rem\"></FaRobot> Difficulty: (1-5)\r\n          </div>\r\n          <input\r\n            type=\"range\"\r\n            min=\"1\"\r\n            max=\"5\"\r\n            step=\"1\"\r\n            onChange={levelChangeHandler}\r\n          ></input>\r\n        </div>\r\n      </div>\r\n      <div className=\"new-settings__actions\">\r\n        <button type=\"submit\">Start</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\nexport default NewGameSettingForm;\r\n","import React from 'react';\r\nimport \"./Settings.css\";\r\nimport NewGameSettingsForm from './NewGameSettingsForm';\r\n\r\nconst NewGameSettings = () => {\r\n    return (\r\n        <div className='new-settings'>\r\n            <NewGameSettingsForm></NewGameSettingsForm>\r\n        </div>\r\n    )\r\n}\r\nexport default NewGameSettings;","import Header from \"../components/Header\";\r\nimport NewGameSettings from \"../components/NewGameSettings\";\r\n\r\nconst NewGameSettingsPage = () => {\r\n    return (\r\n        <div>\r\n            <Header></Header>\r\n            <NewGameSettings></NewGameSettings>\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default NewGameSettingsPage;","import \"./Tile.css\";\r\n\r\n\r\nconst Tile = (props) => {\r\n    if (props.number % 2 === 0)\r\n    {\r\n        return (\r\n            <div className='white-tile'><img src={props.img} alt=\"\"></img></div>\r\n        )\r\n    }\r\n    else\r\n    {\r\n        return (\r\n            <div className='black-tile'><img src={props.img} alt=\"\"></img></div>\r\n        )\r\n    }\r\n}\r\nexport default Tile;","/**\r\n * enum class for the player's turn\r\n */\r\nexport const PlayerSpecifier = {\r\n    FIRST: 'FIRST',\r\n    SECOND: 'SECOND'\r\n}","/**\r\n * simple pair class used to save (x,y) coordinates as a location\r\n */\r\nexport class Pair {\r\n    /**\r\n     * constructor for new pair\r\n     * @param leftArgument x coordinate\r\n     * @param rightArgument y coordinate\r\n     */\r\n    constructor(leftArgument, rightArgument)\r\n    {\r\n        this.arrayForPair = [leftArgument, rightArgument];\r\n    }\r\n\r\n    /**\r\n     * The method will return the x coordinate of the pair\r\n     * @return integer\r\n     */\r\n    getLeft()\r\n    {\r\n        return this.arrayForPair[0];\r\n    }\r\n\r\n    /**\r\n     * The method will return the y coordinate of the pair\r\n     * @return integer\r\n     */\r\n    getRight()\r\n    {\r\n        return this.arrayForPair[1];\r\n    }\r\n\r\n    /**\r\n     * The method will return whether 2 pairs are having identical values\r\n     * @param otherPair another pair to check with\r\n     * @return boolean value\r\n     */\r\n    isIdenticalPair(otherPair)\r\n    {\r\n        return (this.arrayForPair[0] === otherPair.getLeft()) && (this.arrayForPair[1] === otherPair.getRight());\r\n    }\r\n\r\n}\r\n","/**\r\n * abstract class for the general piece object\r\n */\r\n    export class Piece {\r\n    /**\r\n     * override method that implements the movement mechanics the pieces (but pawn)\r\n     * @param newLocation location to move\r\n     * @param gameBoard board object which includes the game board set up\r\n     * @param playerNumber enum which is the player's side\r\n     * @return true if the piece moved successfully, false otherwise\r\n     */\r\n    movePiece(newLocation,gameBoard,playerNumber)\r\n    {\r\n        let isPieceMoved = false;\r\n        let allPossibleMoves = this.possiblePieceMoves(gameBoard);\r\n        for (let i = 0; i < allPossibleMoves.length; i++)\r\n        {\r\n            if (allPossibleMoves.get(i).isIdenticalPair(newLocation))\r\n            {\r\n                let pieceAtLocation = gameBoard.getPieceFromLocation(newLocation);\r\n                if (pieceAtLocation != null)\r\n                {\r\n                    gameBoard.removeFromPieceList(pieceAtLocation, playerNumber);\r\n                }\r\n                gameBoard.putNull(this.currentLocation);\r\n                gameBoard.putPiece(newLocation, this, playerNumber);\r\n                isPieceMoved = true;\r\n                this.currentLocation = newLocation;\r\n                break;\r\n            }\r\n        }\r\n        return isPieceMoved;\r\n    }\r\n\r\n    /**\r\n     * The method will move a piece to a new location, saving the piece on the wanted spot.\r\n     * @param newLocation location to move\r\n     * @param gameBoard board object which includes the game board set up\r\n     * @param playerNumber enum which is the player's side\r\n     * @return the piece of the wanted spot or null if theres no piece\r\n     */\r\n    tempMovePiece(newLocation, gameBoard, playerNumber)\r\n    {\r\n        let newLocationPiece = gameBoard.getPieceFromLocation(newLocation);\r\n        gameBoard.putNull(this.currentLocation);\r\n        gameBoard.putPiece(newLocation, this, playerNumber);\r\n        this.currentLocation = newLocation;\r\n\r\n        return newLocationPiece;\r\n    }\r\n\r\n    /**\r\n     * The method will return the location of the current piece object\r\n     * @return location as Pair\r\n     */\r\n    getCurrentLocation()\r\n    {\r\n        return this.currentLocation;\r\n    }\r\n\r\n    /**\r\n     * The method will return the owner of the current piece object\r\n     * @return player recognizer\r\n     */\r\n    getPlayerNumber()\r\n    {\r\n        return this.playerNumber;\r\n    }\r\n\r\n}\r\n","/**\r\n * enum class for the types of the pieces\r\n */\r\n export const PieceType = {\r\n    KING: 'KING',\r\n    ROOK: 'ROOK',\r\n    BISHOP: 'BISHOP',\r\n    QUEEN: 'QUEEN',\r\n    KNIGHT: 'KNIGHT',\r\n    PAWN: 'PAWN'\r\n}","import {Pair} from \"./Pair\";\r\nimport {Piece} from \"./Piece\";\r\nimport {PieceType} from \"./PieceType\";\r\n/**\r\n * sub-class for the bishop piece\r\n */\r\nexport class Bishop extends Piece{\r\n\r\n    /**\r\n     * constructor for the bishop object based on the location of the piece and the player's number\r\n     * @param locationToInsert tuple of x and y spots\r\n     * @param givenPlayerNumber enum which is the player's side\r\n     */\r\n    constructor(locationToInsert, givenPlayerNumber)\r\n    {\r\n        super();\r\n        this.typeOfPiece = PieceType.BISHOP;\r\n        this.currentLocation = locationToInsert;\r\n        this.playerNumber = givenPlayerNumber;\r\n    }\r\n\r\n    /**\r\n     * override method which calculates the possible moves of the bishop piece according to the current\r\n     * state of the game\r\n     * @param gameBoard board object which includes the game board set up\r\n     * @return array list of all the possible moves\r\n     */\r\n    possiblePieceMoves(gameBoard) {\r\n        let listOfAllPossibleMoves = [];\r\n\r\n        // all moves to top left\r\n        let leftCoordinate = this.currentLocation.getLeft();\r\n        let rightCoordinate = this.currentLocation.getRight();\r\n        while ((leftCoordinate - 1 >= 0) && (rightCoordinate - 1 >= 0))\r\n        {\r\n            var nextPiece = gameBoard.getPieceFromLocation(new Pair(leftCoordinate - 1,\r\n                    rightCoordinate - 1));\r\n            if (nextPiece === null)\r\n            {\r\n                listOfAllPossibleMoves.push(new Pair(leftCoordinate - 1,\r\n                        rightCoordinate - 1));\r\n            }\r\n            else\r\n            {\r\n                if (nextPiece.getPlayerNumber() !== this.playerNumber)\r\n                {\r\n                    listOfAllPossibleMoves.push(new Pair(leftCoordinate - 1,\r\n                            rightCoordinate - 1));\r\n                }\r\n                break;\r\n            }\r\n            leftCoordinate = leftCoordinate - 1;\r\n            rightCoordinate = rightCoordinate - 1;\r\n        }\r\n\r\n        // all moves to bottom left\r\n        leftCoordinate = this.currentLocation.getLeft();\r\n        rightCoordinate = this.currentLocation.getRight();\r\n        while ((leftCoordinate + 1 <= 7) && (rightCoordinate - 1 >= 0))\r\n        {\r\n            nextPiece = gameBoard.getPieceFromLocation(new Pair(leftCoordinate + 1,\r\n                    rightCoordinate - 1));\r\n            if (nextPiece === null)\r\n            {\r\n                listOfAllPossibleMoves.push(new Pair(leftCoordinate + 1,\r\n                        rightCoordinate - 1));\r\n            }\r\n            else\r\n            {\r\n                if (nextPiece.getPlayerNumber() !== this.playerNumber)\r\n                {\r\n                    listOfAllPossibleMoves.push(new Pair(leftCoordinate + 1,\r\n                            rightCoordinate - 1));\r\n                }\r\n                break;\r\n            }\r\n            leftCoordinate = leftCoordinate + 1;\r\n            rightCoordinate = rightCoordinate - 1;\r\n        }\r\n\r\n        // all moves to bottom right\r\n        leftCoordinate = this.currentLocation.getLeft();\r\n        rightCoordinate = this.currentLocation.getRight();\r\n        while ((leftCoordinate + 1 <= 7) && (rightCoordinate + 1 <= 7))\r\n        {\r\n            nextPiece = gameBoard.getPieceFromLocation(new Pair(leftCoordinate + 1,\r\n                    rightCoordinate + 1));\r\n            if (nextPiece === null)\r\n            {\r\n                listOfAllPossibleMoves.push(new Pair(leftCoordinate + 1,\r\n                        rightCoordinate + 1));\r\n            }\r\n            else\r\n            {\r\n                if (nextPiece.getPlayerNumber() !== this.playerNumber)\r\n                {\r\n                    listOfAllPossibleMoves.push(new Pair(leftCoordinate + 1,\r\n                            rightCoordinate + 1));\r\n                }\r\n                break;\r\n            }\r\n            leftCoordinate = leftCoordinate + 1;\r\n            rightCoordinate = rightCoordinate + 1;\r\n        }\r\n\r\n        // all moves to top right\r\n        leftCoordinate = this.currentLocation.getLeft();\r\n        rightCoordinate = this.currentLocation.getRight();\r\n        while ((leftCoordinate - 1 >= 0) && (rightCoordinate + 1 <= 7))\r\n        {\r\n            nextPiece = gameBoard.getPieceFromLocation(new Pair(leftCoordinate - 1,\r\n                    rightCoordinate + 1));\r\n            if (nextPiece === null)\r\n            {\r\n                listOfAllPossibleMoves.push(new Pair(leftCoordinate - 1,\r\n                        rightCoordinate + 1));\r\n            }\r\n            else\r\n            {\r\n                if (nextPiece.getPlayerNumber() !== this.playerNumber)\r\n                {\r\n                    listOfAllPossibleMoves.push(new Pair(leftCoordinate - 1,\r\n                            rightCoordinate + 1));\r\n                }\r\n                break;\r\n            }\r\n            leftCoordinate = leftCoordinate - 1;\r\n            rightCoordinate = rightCoordinate + 1;\r\n        }\r\n\r\n\r\n        return listOfAllPossibleMoves;\r\n    }\r\n}\r\n","import {Pair} from \"./Pair\";\r\nimport {Piece} from \"./Piece\";\r\nimport {PieceType} from \"./PieceType\";\r\n\r\n\r\n/**\r\n * sub-class for the king piece\r\n */\r\nexport class King extends Piece{\r\n\r\n    /**\r\n     * constructor for the king object based on the location of the piece and the player's number\r\n     * @param locationToInsert tuple of x and y spots\r\n     * @param givenPlayerNumber enum which is the player's side\r\n     */\r\n    constructor(locationToInsert,givenPlayerNumber)\r\n    {\r\n        super();\r\n        this.typeOfPiece = PieceType.KING;\r\n        this.currentLocation = locationToInsert;\r\n        this.playerNumber = givenPlayerNumber;\r\n    }\r\n\r\n    /**\r\n     * override method which calculates the possible moves of the king piece according to the current\r\n     * state of the game\r\n     * @param gameBoard board object which includes the game board set up\r\n     * @return array list of all the possible moves\r\n     */\r\n    possiblePieceMoves(gameBoard)\r\n    {\r\n        let listOfAllPossibleMoves = [];\r\n        let leftCoordinate = this.currentLocation.getLeft();\r\n        let rightCoordinate = this.currentLocation.getRight();\r\n        let possibleLeftRightMoves = [];\r\n        possibleLeftRightMoves.push(rightCoordinate);\r\n        let possibleUpDownMoves = [];\r\n        possibleUpDownMoves.push(leftCoordinate);\r\n        if (leftCoordinate -1 >= 0)\r\n        {\r\n            possibleUpDownMoves.push(leftCoordinate - 1);\r\n        }\r\n        if (leftCoordinate + 1 <= 7)\r\n        {\r\n            possibleUpDownMoves.push(leftCoordinate + 1);\r\n        }\r\n        if (rightCoordinate -1 >= 0)\r\n        {\r\n            possibleLeftRightMoves.push(rightCoordinate - 1);\r\n        }\r\n        if (rightCoordinate + 1 <= 7)\r\n        {\r\n            possibleLeftRightMoves.push(rightCoordinate + 1);\r\n        }\r\n\r\n        for(let i = 0; i < possibleLeftRightMoves.length; i++)\r\n        {\r\n            let leftRightMove = possibleLeftRightMoves[i];\r\n            for(let j = 0; j < possibleUpDownMoves.length; j++)\r\n            {\r\n                let upDownMove = possibleUpDownMoves[j];\r\n                let locationCheck = gameBoard.getPieceFromLocation(new Pair(upDownMove, leftRightMove));\r\n                if (locationCheck === null)\r\n                {\r\n                    listOfAllPossibleMoves.push(new Pair(upDownMove, leftRightMove));\r\n                }\r\n                else\r\n                {\r\n                    if (this.playerNumber !== locationCheck.getPlayerNumber())\r\n                    {\r\n                        listOfAllPossibleMoves.push(new Pair(upDownMove, leftRightMove));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return listOfAllPossibleMoves;\r\n    }\r\n\r\n}\r\n","import {Pair} from \"./Pair\";\r\nimport {Piece} from \"./Piece\";\r\nimport {PieceType} from \"./PieceType\";\r\n\r\n/**\r\n * sub-class for the knight piece\r\n */\r\nexport class Knight extends Piece{\r\n\r\n    /**\r\n     * constructor for the knight object based on the location of the piece and the player's number\r\n     * @param locationToInsert tuple of x and y spots\r\n     * @param givenPlayerNumber enum which is the player's side\r\n     */\r\n    constructor(locationToInsert, givenPlayerNumber)\r\n    {\r\n        super();\r\n        this.typeOfPiece = PieceType.KNIGHT;\r\n        this.currentLocation = locationToInsert;\r\n        this.playerNumber = givenPlayerNumber;\r\n    }\r\n\r\n    /**\r\n     * override method which calculates the possible moves of the knight piece according to the current\r\n     * state of the game\r\n     * @param gameBoard board object which includes the game board set up\r\n     * @return array list of all the possible moves\r\n     */\r\n    possiblePieceMoves(gameBoard)\r\n    {\r\n        let listOfAllPossibleMoves = [];\r\n        let leftCoordinate = this.currentLocation.getLeft();\r\n        let rightCoordinate = this.currentLocation.getRight();\r\n\r\n        if ((leftCoordinate + 2 <= 7) && (rightCoordinate + 1 <= 7))\r\n        {\r\n            let locationCheck = gameBoard.getPieceFromLocation(new Pair(leftCoordinate + 2, rightCoordinate + 1));\r\n            if (locationCheck === null)\r\n            {\r\n                listOfAllPossibleMoves.push(new Pair(leftCoordinate + 2, rightCoordinate + 1));\r\n            }\r\n            else\r\n            {\r\n                if (locationCheck.getPlayerNumber() !== this.playerNumber)\r\n                {\r\n                    listOfAllPossibleMoves.push(new Pair(leftCoordinate + 2, rightCoordinate + 1));\r\n                }\r\n            }\r\n        }\r\n\r\n        if ((leftCoordinate + 2 <= 7) && (rightCoordinate - 1 >= 0))\r\n        {\r\n            let locationCheck = gameBoard.getPieceFromLocation(new Pair(leftCoordinate + 2, rightCoordinate - 1));\r\n            if (locationCheck === null)\r\n            {\r\n                listOfAllPossibleMoves.push(new Pair(leftCoordinate + 2, rightCoordinate - 1));\r\n            }\r\n            else\r\n            {\r\n                if (locationCheck.getPlayerNumber() !== this.playerNumber)\r\n                {\r\n                    listOfAllPossibleMoves.push(new Pair(leftCoordinate + 2, rightCoordinate - 1));\r\n                }\r\n            }\r\n        }\r\n\r\n        if ((leftCoordinate - 2 >= 0) && (rightCoordinate + 1 <= 7))\r\n        {\r\n            let locationCheck = gameBoard.getPieceFromLocation(new Pair(leftCoordinate - 2, rightCoordinate + 1));\r\n            if (locationCheck === null)\r\n            {\r\n                listOfAllPossibleMoves.push(new Pair(leftCoordinate - 2, rightCoordinate + 1));\r\n            }\r\n            else\r\n            {\r\n                if (locationCheck.getPlayerNumber() !== this.playerNumber)\r\n                {\r\n                    listOfAllPossibleMoves.push(new Pair(leftCoordinate - 2, rightCoordinate + 1));\r\n                }\r\n            }\r\n        }\r\n\r\n        if ((leftCoordinate - 2 >= 0) && (rightCoordinate - 1 >= 0))\r\n        {\r\n            let locationCheck = gameBoard.getPieceFromLocation(new Pair(leftCoordinate - 2, rightCoordinate - 1));\r\n            if (locationCheck === null)\r\n            {\r\n                listOfAllPossibleMoves.push(new Pair(leftCoordinate - 2, rightCoordinate - 1));\r\n            }\r\n            else\r\n            {\r\n                if (locationCheck.getPlayerNumber() !== this.playerNumber)\r\n                {\r\n                    listOfAllPossibleMoves.push(new Pair(leftCoordinate - 2, rightCoordinate - 1));\r\n                }\r\n            }\r\n        }\r\n\r\n        if ((leftCoordinate + 1 <= 7) && (rightCoordinate - 2 >= 0))\r\n        {\r\n            let locationCheck = gameBoard.getPieceFromLocation(new Pair(leftCoordinate + 1, rightCoordinate - 2));\r\n            if (locationCheck === null)\r\n            {\r\n                listOfAllPossibleMoves.push(new Pair(leftCoordinate + 1, rightCoordinate - 2));\r\n            }\r\n            else\r\n            {\r\n                if (locationCheck.getPlayerNumber() !== this.playerNumber)\r\n                {\r\n                    listOfAllPossibleMoves.push(new Pair(leftCoordinate + 1, rightCoordinate - 2));\r\n                }\r\n            }\r\n        }\r\n\r\n        if ((leftCoordinate - 1 >= 0) && (rightCoordinate - 2 >= 0))\r\n        {\r\n            let locationCheck = gameBoard.getPieceFromLocation(new Pair(leftCoordinate - 1, rightCoordinate - 2));\r\n            if (locationCheck === null)\r\n            {\r\n                listOfAllPossibleMoves.push(new Pair(leftCoordinate - 1, rightCoordinate - 2));\r\n            }\r\n            else\r\n            {\r\n                if (locationCheck.getPlayerNumber() !== this.playerNumber)\r\n                {\r\n                    listOfAllPossibleMoves.push(new Pair(leftCoordinate - 1, rightCoordinate - 2));\r\n                }\r\n            }\r\n        }\r\n\r\n        if ((leftCoordinate + 1 <= 7) && (rightCoordinate + 2 <= 7))\r\n        {\r\n            let locationCheck = gameBoard.getPieceFromLocation(new Pair(leftCoordinate + 1, rightCoordinate + 2));\r\n            if (locationCheck === null)\r\n            {\r\n                listOfAllPossibleMoves.push(new Pair(leftCoordinate + 1, rightCoordinate + 2));\r\n            }\r\n            else\r\n            {\r\n                if (locationCheck.getPlayerNumber() !== this.playerNumber)\r\n                {\r\n                    listOfAllPossibleMoves.push(new Pair(leftCoordinate + 1, rightCoordinate + 2));\r\n                }\r\n            }\r\n        }\r\n\r\n        if ((leftCoordinate - 1 >= 0) && (rightCoordinate + 2 <= 7))\r\n        {\r\n            let locationCheck = gameBoard.getPieceFromLocation(new Pair(leftCoordinate - 1, rightCoordinate + 2));\r\n            if (locationCheck === null)\r\n            {\r\n                listOfAllPossibleMoves.push(new Pair(leftCoordinate - 1, rightCoordinate + 2));\r\n            }\r\n            else\r\n            {\r\n                if (locationCheck.getPlayerNumber() !== this.playerNumber)\r\n                {\r\n                    listOfAllPossibleMoves.push(new Pair(leftCoordinate - 1, rightCoordinate + 2));\r\n                }\r\n            }\r\n        }\r\n\r\n        return listOfAllPossibleMoves;\r\n    }\r\n}\r\n","import {Pair} from \"./Pair\";\r\nimport {Piece} from \"./Piece\";\r\nimport {PieceType} from \"./PieceType\";\r\n\r\n/**\r\n * sub-class for the queen piece\r\n */\r\nexport class Queen extends Piece{\r\n\r\n    /**\r\n     * constructor for the queen object based on the location of the piece and the player's number\r\n     * @param locationToInsert tuple of x and y spots\r\n     * @param givenPlayerNumber enum which is the player's side\r\n     */\r\n    constructor(locationToInsert, givenPlayerNumber)\r\n    {\r\n        super();\r\n        this.typeOfPiece = PieceType.QUEEN;\r\n        this.currentLocation = locationToInsert;\r\n        this.playerNumber =givenPlayerNumber;\r\n    }\r\n\r\n    /**\r\n     * override method which calculates the possible moves of the queen piece according to the current\r\n     * state of the game\r\n     * @param gameBoard board object which includes the game board set up\r\n     * @return array list of all the possible moves\r\n     */\r\n    possiblePieceMoves(gameBoard)\r\n    {\r\n        let listOfAllPossibleMoves = [];\r\n\r\n        // all moves to top\r\n        let leftCoordinate = this.currentLocation.getLeft();\r\n        let rightCoordinate = this.currentLocation.getRight();\r\n        while (leftCoordinate - 1 >= 0)\r\n        {\r\n            let nextPiece = gameBoard.getPieceFromLocation(new Pair(leftCoordinate - 1,\r\n                    rightCoordinate));\r\n            if (nextPiece === null)\r\n            {\r\n                listOfAllPossibleMoves.push(new Pair(leftCoordinate - 1,\r\n                        rightCoordinate));\r\n            }\r\n            else\r\n            {\r\n                if (nextPiece.getPlayerNumber() !== this.playerNumber)\r\n                {\r\n                    listOfAllPossibleMoves.push(new Pair(leftCoordinate - 1,\r\n                            rightCoordinate));\r\n                }\r\n                break;\r\n            }\r\n            leftCoordinate = leftCoordinate - 1;\r\n        }\r\n\r\n        // all moves to left\r\n        leftCoordinate = this.currentLocation.getLeft();\r\n        rightCoordinate = this.currentLocation.getRight();\r\n        while (rightCoordinate - 1 >= 0)\r\n        {\r\n            let nextPiece = gameBoard.getPieceFromLocation(new Pair(leftCoordinate,\r\n                    rightCoordinate - 1));\r\n            if (nextPiece === null)\r\n            {\r\n                listOfAllPossibleMoves.push(new Pair(leftCoordinate,\r\n                        rightCoordinate - 1));\r\n            }\r\n            else\r\n            {\r\n                if (nextPiece.getPlayerNumber() !== this.playerNumber)\r\n                {\r\n                    listOfAllPossibleMoves.push(new Pair(leftCoordinate,\r\n                            rightCoordinate - 1));\r\n                }\r\n                break;\r\n            }\r\n            rightCoordinate = rightCoordinate - 1;\r\n        }\r\n\r\n        // all moves to right\r\n        leftCoordinate = this.currentLocation.getLeft();\r\n        rightCoordinate = this.currentLocation.getRight();\r\n        while (rightCoordinate + 1 <= 7)\r\n        {\r\n            let nextPiece = gameBoard.getPieceFromLocation(new Pair(leftCoordinate,\r\n                    rightCoordinate + 1));\r\n            if (nextPiece === null)\r\n            {\r\n                listOfAllPossibleMoves.push(new Pair(leftCoordinate,\r\n                        rightCoordinate + 1));\r\n            }\r\n            else\r\n            {\r\n                if (nextPiece.getPlayerNumber() !== this.playerNumber)\r\n                {\r\n                    listOfAllPossibleMoves.push(new Pair(leftCoordinate,\r\n                            rightCoordinate + 1));\r\n                }\r\n                break;\r\n            }\r\n            rightCoordinate = rightCoordinate + 1;\r\n        }\r\n\r\n        // all moves to bottom\r\n        leftCoordinate = this.currentLocation.getLeft();\r\n        rightCoordinate = this.currentLocation.getRight();\r\n        while (leftCoordinate + 1 <= 7)\r\n        {\r\n            let nextPiece = gameBoard.getPieceFromLocation(new Pair(leftCoordinate + 1,\r\n                    rightCoordinate));\r\n            if (nextPiece === null)\r\n            {\r\n                listOfAllPossibleMoves.push(new Pair(leftCoordinate + 1,\r\n                        rightCoordinate));\r\n            }\r\n            else\r\n            {\r\n                if (nextPiece.getPlayerNumber() !== this.playerNumber)\r\n                {\r\n                    listOfAllPossibleMoves.push(new Pair(leftCoordinate + 1,\r\n                            rightCoordinate));\r\n                }\r\n                break;\r\n            }\r\n            leftCoordinate = leftCoordinate + 1;\r\n        }\r\n\r\n        // all moves to top left\r\n        leftCoordinate = this.currentLocation.getLeft();\r\n        rightCoordinate = this.currentLocation.getRight();\r\n        while ((leftCoordinate - 1 >= 0) && (rightCoordinate - 1 >= 0))\r\n        {\r\n            let nextPiece = gameBoard.getPieceFromLocation(new Pair(leftCoordinate - 1,\r\n                    rightCoordinate - 1));\r\n            if (nextPiece === null)\r\n            {\r\n                listOfAllPossibleMoves.push(new Pair(leftCoordinate - 1,\r\n                        rightCoordinate - 1));\r\n            }\r\n            else\r\n            {\r\n                if (nextPiece.getPlayerNumber() !== this.playerNumber)\r\n                {\r\n                    listOfAllPossibleMoves.push(new Pair(leftCoordinate - 1,\r\n                            rightCoordinate - 1));\r\n                }\r\n                break;\r\n            }\r\n            leftCoordinate = leftCoordinate - 1;\r\n            rightCoordinate = rightCoordinate - 1;\r\n        }\r\n\r\n        // all moves to bottom left\r\n        leftCoordinate = this.currentLocation.getLeft();\r\n        rightCoordinate = this.currentLocation.getRight();\r\n        while ((leftCoordinate + 1 <= 7) && (rightCoordinate - 1 >= 0))\r\n        {\r\n            let nextPiece = gameBoard.getPieceFromLocation(new Pair(leftCoordinate + 1,\r\n                    rightCoordinate - 1));\r\n            if (nextPiece === null)\r\n            {\r\n                listOfAllPossibleMoves.push(new Pair(leftCoordinate + 1,\r\n                        rightCoordinate - 1));\r\n            }\r\n            else\r\n            {\r\n                if (nextPiece.getPlayerNumber() !== this.playerNumber)\r\n                {\r\n                    listOfAllPossibleMoves.push(new Pair(leftCoordinate + 1,\r\n                            rightCoordinate - 1));\r\n                }\r\n                break;\r\n            }\r\n            leftCoordinate = leftCoordinate + 1;\r\n            rightCoordinate = rightCoordinate - 1;\r\n        }\r\n\r\n        // all moves to bottom right\r\n        leftCoordinate = this.currentLocation.getLeft();\r\n        rightCoordinate = this.currentLocation.getRight();\r\n        while ((leftCoordinate + 1 <= 7) && (rightCoordinate + 1 <= 7))\r\n        {\r\n            let nextPiece = gameBoard.getPieceFromLocation(new Pair(leftCoordinate + 1,\r\n                    rightCoordinate + 1));\r\n            if (nextPiece === null)\r\n            {\r\n                listOfAllPossibleMoves.push(new Pair(leftCoordinate + 1,\r\n                        rightCoordinate + 1));\r\n            }\r\n            else\r\n            {\r\n                if (nextPiece.getPlayerNumber() !== this.playerNumber)\r\n                {\r\n                    listOfAllPossibleMoves.push(new Pair(leftCoordinate + 1,\r\n                            rightCoordinate + 1));\r\n                }\r\n                break;\r\n            }\r\n            leftCoordinate = leftCoordinate + 1;\r\n            rightCoordinate = rightCoordinate + 1;\r\n        }\r\n\r\n        // all moves to top right\r\n        leftCoordinate = this.currentLocation.getLeft();\r\n        rightCoordinate = this.currentLocation.getRight();\r\n        while ((leftCoordinate - 1 >= 0) && (rightCoordinate + 1 <= 7))\r\n        {\r\n            let nextPiece = gameBoard.getPieceFromLocation(new Pair(leftCoordinate - 1,\r\n                    rightCoordinate + 1));\r\n            if (nextPiece === null)\r\n            {\r\n                listOfAllPossibleMoves.push(new Pair(leftCoordinate - 1,\r\n                        rightCoordinate + 1));\r\n            }\r\n            else\r\n            {\r\n                if (nextPiece.getPlayerNumber() !== this.playerNumber)\r\n                {\r\n                    listOfAllPossibleMoves.push(new Pair(leftCoordinate - 1,\r\n                            rightCoordinate + 1));\r\n                }\r\n                break;\r\n            }\r\n            leftCoordinate = leftCoordinate - 1;\r\n            rightCoordinate = rightCoordinate + 1;\r\n        }\r\n\r\n        return listOfAllPossibleMoves;\r\n    }\r\n\r\n}","import {Pair} from \"./Pair\";\r\nimport {Piece} from \"./Piece\";\r\nimport {PieceType} from \"./PieceType\";\r\n\r\n\r\n/**\r\n * sub-class for the rook piece\r\n */\r\nexport class Rook extends Piece{\r\n\r\n    /**\r\n     * constructor for the rook object based on the location of the piece and the player's number\r\n     * @param locationToInsert tuple of x and y spots\r\n     * @param givenPlayerNumber enum which is the player's side\r\n     */\r\n    constructor(locationToInsert, givenPlayerNumber)\r\n    {\r\n        super();\r\n        this.typeOfPiece = PieceType.ROOK;\r\n        this.currentLocation = locationToInsert;\r\n        this.playerNumber = givenPlayerNumber;\r\n    }\r\n\r\n    /**\r\n     * override method which calculates the possible moves of the rook piece according to the current\r\n     * state of the game\r\n     * @param gameBoard board object which includes the game board set up\r\n     * @return array list of all the possible moves\r\n     */\r\n    possiblePieceMoves(gameBoard)\r\n    {\r\n        let listOfAllPossibleMoves = [];\r\n\r\n        // all moves to top\r\n        let leftCoordinate = this.currentLocation.getLeft();\r\n        let rightCoordinate = this.currentLocation.getRight();\r\n        while (leftCoordinate - 1 >= 0)\r\n        {\r\n            let nextPiece = gameBoard.getPieceFromLocation(new Pair(leftCoordinate - 1,\r\n                    rightCoordinate));\r\n            if (nextPiece === null)\r\n            {\r\n                listOfAllPossibleMoves.push(new Pair(leftCoordinate - 1,\r\n                        rightCoordinate));\r\n            }\r\n            else\r\n            {\r\n                if (nextPiece.getPlayerNumber() !== this.playerNumber)\r\n                {\r\n                    listOfAllPossibleMoves.push(new Pair(leftCoordinate - 1,\r\n                            rightCoordinate));\r\n                }\r\n                break;\r\n            }\r\n            leftCoordinate = leftCoordinate - 1;\r\n        }\r\n\r\n        // all moves to left\r\n        leftCoordinate = this.currentLocation.getLeft();\r\n        rightCoordinate = this.currentLocation.getRight();\r\n        while (rightCoordinate - 1 >= 0)\r\n        {\r\n            let nextPiece = gameBoard.getPieceFromLocation(new Pair(leftCoordinate,\r\n                    rightCoordinate - 1));\r\n            if (nextPiece === null)\r\n            {\r\n                listOfAllPossibleMoves.push(new Pair(leftCoordinate,\r\n                        rightCoordinate - 1));\r\n            }\r\n            else\r\n            {\r\n                if (nextPiece.getPlayerNumber() !== this.playerNumber)\r\n                {\r\n                    listOfAllPossibleMoves.push(new Pair(leftCoordinate,\r\n                            rightCoordinate - 1));\r\n                }\r\n                break;\r\n            }\r\n            rightCoordinate = rightCoordinate - 1;\r\n        }\r\n\r\n        // all moves to right\r\n        leftCoordinate = this.currentLocation.getLeft();\r\n        rightCoordinate = this.currentLocation.getRight();\r\n        while (rightCoordinate + 1 <= 7)\r\n        {\r\n            let nextPiece = gameBoard.getPieceFromLocation(new Pair(leftCoordinate,\r\n                    rightCoordinate + 1));\r\n            if (nextPiece === null)\r\n            {\r\n                listOfAllPossibleMoves.push(new Pair(leftCoordinate,\r\n                        rightCoordinate + 1));\r\n            }\r\n            else\r\n            {\r\n                if (nextPiece.getPlayerNumber() !== this.playerNumber)\r\n                {\r\n                    listOfAllPossibleMoves.push(new Pair(leftCoordinate,\r\n                            rightCoordinate + 1));\r\n                }\r\n                break;\r\n            }\r\n            rightCoordinate = rightCoordinate + 1;\r\n        }\r\n\r\n        // all moves to bottom\r\n        leftCoordinate = this.currentLocation.getLeft();\r\n        rightCoordinate = this.currentLocation.getRight();\r\n        while (leftCoordinate + 1 <= 7)\r\n        {\r\n            let nextPiece = gameBoard.getPieceFromLocation(new Pair(leftCoordinate + 1,\r\n                    rightCoordinate));\r\n            if (nextPiece === null)\r\n            {\r\n                listOfAllPossibleMoves.push(new Pair(leftCoordinate + 1,\r\n                        rightCoordinate));\r\n            }\r\n            else\r\n            {\r\n                if (nextPiece.getPlayerNumber() !== this.playerNumber)\r\n                {\r\n                    listOfAllPossibleMoves.push(new Pair(leftCoordinate + 1,\r\n                            rightCoordinate));\r\n                }\r\n                break;\r\n            }\r\n            leftCoordinate = leftCoordinate + 1;\r\n        }\r\n\r\n\r\n        return listOfAllPossibleMoves;\r\n    }\r\n}\r\n","import {Bishop} from \"./Bishop\";\r\nimport {Knight} from \"./Knight\";\r\nimport {Pair} from \"./Pair\";\r\nimport {Piece} from \"./Piece\";\r\nimport {PieceType} from \"./PieceType\";\r\nimport {PlayerSpecifier} from \"./PlayerSpecifier\";\r\nimport {Queen} from \"./Queen\";\r\nimport {Rook} from \"./Rook\";\r\n\r\n/**\r\n * sub-class for the pawn piece\r\n */\r\nexport class Pawn extends Piece{\r\n\r\n    /**\r\n     * constructor for the pawn object based on the location of the piece and the player's number\r\n     * @param locationToInsert tuple of x and y spots\r\n     * @param givenPlayerNumber enum which is the player's side\r\n     */\r\n    constructor(locationToInsert, givenPlayerNumber)\r\n    {\r\n        super();\r\n        this.typeOfPiece = PieceType.PAWN;\r\n        this.currentLocation = locationToInsert;\r\n        this.playerNumber = givenPlayerNumber;\r\n    }\r\n\r\n    /**\r\n     * override method which calculates the possible moves of the pawn piece according to the current\r\n     * state of the game\r\n     * @param gameBoard board object which includes the game board set up\r\n     * @return array list of all the possible moves\r\n     */\r\n    possiblePieceMoves(gameBoard)\r\n    {\r\n        let listOfAllPossibleMoves = [];\r\n        let leftCoordinate = this.currentLocation.getLeft();\r\n        let rightCoordinate = this.currentLocation.getRight();\r\n\r\n        if (this.playerNumber === PlayerSpecifier.FIRST)\r\n        {\r\n            if (leftCoordinate === 6)\r\n            {\r\n                let locationCheck = gameBoard.getPieceFromLocation(new Pair(leftCoordinate - 2, rightCoordinate));\r\n                if (locationCheck === null)\r\n                {\r\n                    listOfAllPossibleMoves.push(new Pair(leftCoordinate - 2, rightCoordinate));\r\n                }\r\n            }\r\n            if ((leftCoordinate - 1 >= 0) && (rightCoordinate + 1 <= 7))\r\n            {\r\n                let locationCheck = gameBoard.getPieceFromLocation(new Pair(leftCoordinate - 1, rightCoordinate + 1));\r\n                if (locationCheck !== null)\r\n                {\r\n                    if (locationCheck.getPlayerNumber() !== this.getPlayerNumber())\r\n                    {\r\n                        listOfAllPossibleMoves.push(new Pair(leftCoordinate - 1, rightCoordinate + 1));\r\n                    }\r\n                }\r\n            }\r\n            if ((leftCoordinate - 1 >= 0) && (rightCoordinate - 1 >= 0))\r\n            {\r\n                let locationCheck = gameBoard.getPieceFromLocation(new Pair(leftCoordinate - 1, rightCoordinate - 1));\r\n                if (locationCheck !== null)\r\n                {\r\n                    if (locationCheck.getPlayerNumber() !== this.getPlayerNumber())\r\n                    {\r\n                        listOfAllPossibleMoves.push(new Pair(leftCoordinate - 1, rightCoordinate - 1));\r\n                    }\r\n                }\r\n            }\r\n            if (leftCoordinate - 1 >= 0)\r\n            {\r\n                let locationCheck = gameBoard.getPieceFromLocation(new Pair(leftCoordinate - 1, rightCoordinate));\r\n                if (locationCheck === null)\r\n                {\r\n                    listOfAllPossibleMoves.push(new Pair(leftCoordinate - 1, rightCoordinate));\r\n                }\r\n            }\r\n        }\r\n        else\r\n        {\r\n            if (leftCoordinate === 1)\r\n            {\r\n                let locationCheck = gameBoard.getPieceFromLocation(new Pair(leftCoordinate + 2, rightCoordinate));\r\n                if (locationCheck === null)\r\n                {\r\n                    listOfAllPossibleMoves.push(new Pair(leftCoordinate + 2, rightCoordinate));\r\n                }\r\n            }\r\n\r\n            if ((leftCoordinate + 1 >= 0) && (rightCoordinate + 1 <= 7))\r\n            {\r\n                let locationCheck = gameBoard.getPieceFromLocation(new Pair(leftCoordinate + 1, rightCoordinate + 1));\r\n                if (locationCheck !== null)\r\n                {\r\n                    if (locationCheck.getPlayerNumber() !== this.getPlayerNumber())\r\n                    {\r\n                        listOfAllPossibleMoves.push(new Pair(leftCoordinate + 1, rightCoordinate + 1));\r\n                    }\r\n                }\r\n            }\r\n            if ((leftCoordinate + 1 <= 7) && (rightCoordinate - 1 >= 0))\r\n            {\r\n                let locationCheck = gameBoard.getPieceFromLocation(new Pair(leftCoordinate + 1, rightCoordinate - 1));\r\n                if (locationCheck !== null)\r\n                {\r\n                    if (locationCheck.getPlayerNumber() !== this.getPlayerNumber())\r\n                    {\r\n                        listOfAllPossibleMoves.push(new Pair(leftCoordinate + 1, rightCoordinate + 1));\r\n                    }\r\n                }\r\n            }\r\n            if (leftCoordinate + 1 >= 0)\r\n            {\r\n                let locationCheck = gameBoard.getPieceFromLocation(new Pair(leftCoordinate + 1, rightCoordinate));\r\n                if (locationCheck === null)\r\n                {\r\n                    listOfAllPossibleMoves.push(new Pair(leftCoordinate + 1, rightCoordinate));\r\n                }\r\n            }\r\n        }\r\n        return listOfAllPossibleMoves;\r\n    }\r\n\r\n    /**\r\n     * override method that implements the movement mechanics of the pawn piece\r\n     * @param newLocation location to move\r\n     * @param gameBoard board object which includes the game board set up\r\n     * @param playerNumber enum which is the player's side\r\n     * @return true if the piece moved successfully, false otherwise\r\n     */\r\n    movePiece(newLocation, gameBoard, playerNumber)\r\n    {\r\n        let isPieceMoved = false;\r\n        let allPossibleMoves = this.possiblePieceMoves(gameBoard);\r\n        for(let i = 0; i < allPossibleMoves.length; i++)\r\n        {\r\n            let allPossibleMove = allPossibleMoves[i];\r\n            if (allPossibleMove.isIdenticalPair(newLocation)) {\r\n                let pieceAtLocation = gameBoard.getPieceFromLocation(newLocation);\r\n                if (pieceAtLocation !== null) {\r\n                    gameBoard.removeFromPieceList(pieceAtLocation, playerNumber);\r\n                }\r\n                gameBoard.putNull(this.currentLocation);\r\n                gameBoard.putPiece(newLocation, this, playerNumber);\r\n                isPieceMoved = true;\r\n                this.currentLocation = newLocation;\r\n                break;\r\n            }\r\n        }\r\n        let pawnLocation = this.currentLocation;\r\n        if (this.currentLocation.getLeft() === 0 || this.currentLocation.getLeft() === 7)\r\n        {\r\n            let newPiece = 'O';\r\n            while (newPiece === 'O')\r\n            {\r\n                newPiece = window.prompt(\"Choose new Piece: R-Rook, K-Knight, B-Bishop, Q-Queen\")\r\n            }\r\n            if (newPiece === 'R')\r\n            {\r\n                gameBoard.removeOldPiece(pawnLocation, this, playerNumber);\r\n                gameBoard.addNewPiece(pawnLocation, new Rook(pawnLocation, playerNumber), playerNumber);\r\n            }\r\n            if (newPiece === 'K')\r\n            {\r\n                gameBoard.removeOldPiece(pawnLocation, this, playerNumber);\r\n                gameBoard.addNewPiece(pawnLocation, new Knight(pawnLocation, playerNumber), playerNumber);\r\n            }\r\n            if (newPiece === 'B')\r\n            {\r\n                gameBoard.removeOldPiece(pawnLocation, this, playerNumber);\r\n                gameBoard.addNewPiece(pawnLocation, new Bishop(pawnLocation, playerNumber), playerNumber);\r\n            }\r\n            if (newPiece === 'Q')\r\n            {\r\n                gameBoard.removeOldPiece(pawnLocation, this, playerNumber);\r\n                gameBoard.addNewPiece(pawnLocation, new Queen(pawnLocation, playerNumber), playerNumber);\r\n            }\r\n        }\r\n        return isPieceMoved;\r\n    }\r\n}\r\n","import {Bishop} from \"./Bishop\";\r\nimport {King} from \"./King\";\r\nimport {Knight} from \"./Knight\";\r\nimport {Pair} from \"./Pair\";\r\nimport {Pawn} from \"./Pawn\";\r\nimport {PlayerSpecifier} from \"./PlayerSpecifier\";\r\nimport {Queen} from \"./Queen\";\r\nimport {Rook} from \"./Rook\";\r\n\r\n/**\r\n * The board class will contain the current state of pieces in the board\r\n */\r\n    export class GameBoard {\r\n    /**\r\n     * Simple constructor for a board initiated with pieces\r\n     */\r\n    static counter = 0;\r\n    \r\n    constructor()\r\n    {\r\n        this.gameBoard = [\r\n        [null, null, null, null, null, null, null, null],\r\n        [null, null, null, null, null, null, null, null],\r\n        [null, null, null, null, null, null, null, null],\r\n        [null, null, null, null, null, null, null, null],\r\n        [null, null, null, null, null, null, null, null],\r\n        [null, null, null, null, null, null, null, null],\r\n        [null, null, null, null, null, null, null, null],\r\n        [null, null, null, null, null, null, null, null]];\r\n        this.firstPlayerPieces = [];\r\n        this.secondPlayerPieces = [];\r\n\r\n        //first player init\r\n        for(let i = 0; i < 8; i++)\r\n        {\r\n            let newPawn = new Pawn(new Pair(6, i), PlayerSpecifier.FIRST);\r\n            this.gameBoard[6][i] = newPawn;\r\n            this.firstPlayerPieces.push(newPawn);\r\n        }\r\n\r\n        let player1LeftRook = new Rook(new Pair(7, 0), PlayerSpecifier.FIRST);\r\n        let player1RightRook = new Rook(new Pair(7, 7), PlayerSpecifier.FIRST);\r\n        this.gameBoard[7][0] = player1LeftRook;\r\n        this.gameBoard[7][7] = player1RightRook;\r\n        this.firstPlayerPieces.push(player1LeftRook);\r\n        this.firstPlayerPieces.push(player1RightRook);\r\n\r\n        let player1LeftKnight = new Knight(new Pair(7, 1), PlayerSpecifier.FIRST);\r\n        let player1RightKnight = new Knight(new Pair(7, 6), PlayerSpecifier.FIRST);\r\n        this.gameBoard[7][1] = player1LeftKnight;\r\n        this.gameBoard[7][6] = player1RightKnight;\r\n        this.firstPlayerPieces.push(player1LeftKnight);\r\n        this.firstPlayerPieces.push(player1RightKnight);\r\n\r\n        let player1LeftBishop = new Bishop(new Pair(7, 2), PlayerSpecifier.FIRST);\r\n        let player1RightBishop = new Bishop(new Pair(7, 5), PlayerSpecifier.FIRST);\r\n        this.gameBoard[7][2] = player1LeftBishop;\r\n        this.gameBoard[7][5] = player1RightBishop;\r\n        this.firstPlayerPieces.push(player1LeftBishop);\r\n        this.firstPlayerPieces.push(player1RightBishop);\r\n\r\n        let player1King = new King(new Pair(7, 4), PlayerSpecifier.FIRST);\r\n        this.gameBoard[7][4] = player1King;\r\n        this.firstPlayerPieces.push(player1King);\r\n\r\n        let player1Queen = new Queen(new Pair(7, 3), PlayerSpecifier.FIRST);\r\n        this.gameBoard[7][3] = player1Queen;\r\n        this.firstPlayerPieces.push(player1Queen);\r\n\r\n        //second player init\r\n        for(let i = 0; i < 8; i++)\r\n        {\r\n            let newPawn = new Pawn(new Pair(1, i), PlayerSpecifier.SECOND);\r\n            this.gameBoard[1][i] = newPawn;\r\n            this.secondPlayerPieces.push(newPawn);\r\n        }\r\n\r\n        let player2LeftRook = new Rook(new Pair(0, 0), PlayerSpecifier.SECOND);\r\n        let player2RightRook = new Rook(new Pair(0, 7), PlayerSpecifier.SECOND);\r\n        this.gameBoard[0][0] = player2LeftRook;\r\n        this.gameBoard[0][7] = player2RightRook;\r\n        this.secondPlayerPieces.push(player2LeftRook);\r\n        this.secondPlayerPieces.push(player2RightRook);\r\n\r\n        let player2LeftKnight = new Knight(new Pair(0, 1), PlayerSpecifier.SECOND);\r\n        let player2RightKnight = new Knight(new Pair(0, 6), PlayerSpecifier.SECOND);\r\n        this.gameBoard[0][1] = player2LeftKnight;\r\n        this.gameBoard[0][6] = player2RightKnight;\r\n        this.secondPlayerPieces.push(player2LeftKnight);\r\n        this.secondPlayerPieces.push(player2RightKnight);\r\n\r\n        let player2LeftBishop = new Bishop(new Pair(0, 2), PlayerSpecifier.SECOND);\r\n        let player2RightBishop = new Bishop(new Pair(0, 5), PlayerSpecifier.SECOND);\r\n        this.gameBoard[0][2] = player2LeftBishop;\r\n        this.gameBoard[0][5] = player2RightBishop;\r\n        this.secondPlayerPieces.push(player2LeftBishop);\r\n        this.secondPlayerPieces.push(player2RightBishop);\r\n\r\n        let player2King = new King(new Pair(0, 4), PlayerSpecifier.SECOND);\r\n        this.gameBoard[0][4] = player2King;\r\n        this.secondPlayerPieces.push(player2King);\r\n\r\n        let player2Queen = new Queen(new Pair(0, 3), PlayerSpecifier.SECOND);\r\n        this.gameBoard[0][3] = player2Queen;\r\n        this.secondPlayerPieces.push(player2Queen);\r\n\r\n        //firstPlayerOnlyPawnInit();\r\n        //secondPlayerOnlyPawnInit();\r\n\r\n    }\r\n\r\n    /**\r\n     * The method will initiate the starting position for the black pieces\r\n     */\r\n    secondPlayerPieceInit()\r\n    {\r\n        for(let i = 0; i < 8; i++)\r\n        {\r\n            let newPawn = new Pawn(new Pair(1, i), PlayerSpecifier.SECOND);\r\n            this.gameBoard[1][i] = newPawn;\r\n            this.secondPlayerPieces.push(newPawn);\r\n        }\r\n\r\n        let player2LeftRook = new Rook(new Pair(0, 0), PlayerSpecifier.SECOND);\r\n        let player2RightRook = new Rook(new Pair(0, 7), PlayerSpecifier.SECOND);\r\n        this.gameBoard[0][0] = player2LeftRook;\r\n        this.gameBoard[0][7] = player2RightRook;\r\n        this.secondPlayerPieces.push(player2LeftRook);\r\n        this.secondPlayerPieces.push(player2RightRook);\r\n\r\n        let player2LeftKnight = new Knight(new Pair(0, 1), PlayerSpecifier.SECOND);\r\n        let player2RightKnight = new Knight(new Pair(0, 6), PlayerSpecifier.SECOND);\r\n        this.gameBoard[0][1] = player2LeftKnight;\r\n        this.gameBoard[0][6] = player2RightKnight;\r\n        this.secondPlayerPieces.push(player2LeftKnight);\r\n        this.secondPlayerPieces.push(player2RightKnight);\r\n\r\n        let player2LeftBishop = new Bishop(new Pair(0, 2), PlayerSpecifier.SECOND);\r\n        let player2RightBishop = new Bishop(new Pair(0, 5), PlayerSpecifier.SECOND);\r\n        this.gameBoard[0][2] = player2LeftBishop;\r\n        this.gameBoard[0][5] = player2RightBishop;\r\n        this.secondPlayerPieces.push(player2LeftBishop);\r\n        this.secondPlayerPieces.push(player2RightBishop);\r\n\r\n        let player2King = new King(new Pair(0, 4), PlayerSpecifier.SECOND);\r\n        this.gameBoard[0][4] = player2King;\r\n        this.secondPlayerPieces.push(player2King);\r\n\r\n        let player2Queen = new Queen(new Pair(0, 3), PlayerSpecifier.SECOND);\r\n        this.gameBoard[0][3] = player2Queen;\r\n        this.secondPlayerPieces.push(player2Queen);\r\n    }\r\n\r\n    /**\r\n     * The method will initiate the starting position for the white pieces\r\n     */\r\n    firstPlayerPieceInit()\r\n    {\r\n        for(let i = 0; i < 8; i++)\r\n        {\r\n            let newPawn = new Pawn(new Pair(6, i), PlayerSpecifier.FIRST);\r\n            this.gameBoard[6][i] = newPawn;\r\n            this.firstPlayerPieces.push(newPawn);\r\n        }\r\n\r\n        let player1LeftRook = new Rook(new Pair(7, 0), PlayerSpecifier.FIRST);\r\n        let player1RightRook = new Rook(new Pair(7, 7), PlayerSpecifier.FIRST);\r\n        this.gameBoard[7][0] = player1LeftRook;\r\n        this.gameBoard[7][7] = player1RightRook;\r\n        this.firstPlayerPieces.push(player1LeftRook);\r\n        this.firstPlayerPieces.push(player1RightRook);\r\n\r\n        let player1LeftKnight = new Knight(new Pair(7, 1), PlayerSpecifier.FIRST);\r\n        let player1RightKnight = new Knight(new Pair(7, 6), PlayerSpecifier.FIRST);\r\n        this.gameBoard[7][1] = player1LeftKnight;\r\n        this.gameBoard[7][6] = player1RightKnight;\r\n        this.firstPlayerPieces.push(player1LeftKnight);\r\n        this.firstPlayerPieces.push(player1RightKnight);\r\n\r\n        let player1LeftBishop = new Bishop(new Pair(7, 2), PlayerSpecifier.FIRST);\r\n        let player1RightBishop = new Bishop(new Pair(7, 5), PlayerSpecifier.FIRST);\r\n        this.gameBoard[7][2] = player1LeftBishop;\r\n        this.gameBoard[7][5] = player1RightBishop;\r\n        this.firstPlayerPieces.push(player1LeftBishop);\r\n        this.firstPlayerPieces.push(player1RightBishop);\r\n\r\n        let player1King = new King(new Pair(7, 4), PlayerSpecifier.FIRST);\r\n        this.gameBoard[7][4] = player1King;\r\n        this.firstPlayerPieces.push(player1King);\r\n\r\n        let player1Queen = new Queen(new Pair(7, 3), PlayerSpecifier.FIRST);\r\n        this.gameBoard[7][3] = player1Queen;\r\n        this.firstPlayerPieces.push(player1Queen);\r\n    }\r\n\r\n    /**\r\n     * The method will return the piece exist in the given location, if theres no piece the method will return\r\n     * null\r\n     * @param givenLocation location of the piece to look for\r\n     * @return the located piece\r\n     */\r\n    getPieceFromLocation(givenLocation)\r\n    {\r\n        let leftCoordinate = givenLocation.getLeft();\r\n        let rightCoordinate = givenLocation.getRight();\r\n        if (this.gameBoard[leftCoordinate][rightCoordinate] != null)\r\n        {\r\n            return this.gameBoard[leftCoordinate][rightCoordinate];\r\n        }\r\n        else\r\n            return null;\r\n    }\r\n    /**\r\n     * used for debug - print the current state of the board\r\n     */\r\n    printBoardWithObjects()\r\n    {\r\n        for (let i = 0; i < 8; i++)\r\n        {\r\n            console.log(\"\");\r\n            for (let j = 0; j < 8; j++)\r\n            {\r\n                console.log(this.gameBoard[i][j] + \" \");\r\n            }\r\n        }\r\n        console.log(\"\");\r\n        console.log(\"\");\r\n    }\r\n\r\n    /**\r\n     * the method will put null in the given location\r\n     * @param givenLocation x,y coordinates\r\n     */\r\n    putNull(givenLocation)\r\n    {\r\n        let leftCoordinate = givenLocation.getLeft();\r\n        let rightCoordinate = givenLocation.getRight();\r\n        this.gameBoard[leftCoordinate][rightCoordinate] = null;\r\n    }\r\n\r\n    /**\r\n     * The method will put a given piece at a given location\r\n     * @param givenLocation location to place\r\n     * @param givenPiece piece\r\n     * @param playerNumber enum which is the player's side\r\n     */\r\n    putPiece(givenLocation, givenPiece, playerNumber)\r\n    {\r\n        let leftCoordinate = givenLocation.getLeft();\r\n        let rightCoordinate = givenLocation.getRight();\r\n        this.gameBoard[leftCoordinate][rightCoordinate] = givenPiece;\r\n    }\r\n\r\n    /**\r\n     * The method will remove a piece from the board\r\n     * @param givenPiece piece to remove\r\n     * @param playerNumber enum which is the player's side\r\n     */\r\n    removeFromPieceList(givenPiece, playerNumber)\r\n    {\r\n        if (playerNumber === PlayerSpecifier.FIRST)\r\n        {\r\n            this.secondPlayerPieces.remove(givenPiece);\r\n        }\r\n        else\r\n        {\r\n            this.firstPlayerPieces.remove(givenPiece);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The method will push a new piece to the board according to chosen player\r\n     * @param givenLocation location to place\r\n     * @param givenPiece piece\r\n     * @param playerNumber enum which is the player's side\r\n     */\r\n    addNewPiece(givenLocation, givenPiece, playerNumber)\r\n    {\r\n        let leftCoordinate = givenLocation.getLeft();\r\n        let rightCoordinate = givenLocation.getRight();\r\n        this.gameBoard[leftCoordinate][rightCoordinate] = givenPiece;\r\n        if (playerNumber === PlayerSpecifier.FIRST)\r\n        {\r\n            this.firstPlayerPieces.push(givenPiece);\r\n        }\r\n        else\r\n        {\r\n            this.secondPlayerPieces.push(givenPiece);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The method will remove a piece from the board according to chosen player\r\n     * @param givenLocation location to remove\r\n     * @param oldPiece piece\r\n     * @param playerNumber enum which is the player's side\r\n     */\r\n    removeOldPiece(givenLocation, oldPiece, playerNumber)\r\n    {\r\n        let leftCoordinate = givenLocation.getLeft();\r\n        let rightCoordinate = givenLocation.getRight();\r\n        this.gameBoard[leftCoordinate][rightCoordinate] = null;\r\n        if (playerNumber === PlayerSpecifier.FIRST)\r\n        {\r\n            this.firstPlayerPieces.remove(oldPiece);\r\n        }\r\n        else\r\n        {\r\n            this.secondPlayerPieces.remove(oldPiece);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The method will return the array list of pieces of given player\r\n     * @param playerNumber enum which is the player's side\r\n     * @return array list contains all the pieces of the player\r\n     */\r\n    getPlayerPieces(playerNumber)\r\n    {\r\n        if (playerNumber === PlayerSpecifier.FIRST)\r\n        {\r\n            return this.firstPlayerPieces;\r\n        }\r\n        else\r\n        {\r\n            return this.secondPlayerPieces;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * The method will check if the given player is at \"Check\" state\r\n     * @param nowPlayingPlayerNumber enum which is the player's side\r\n     * @return boolean value\r\n     */\r\n    isCheck(nowPlayingPlayerNumber)\r\n    {\r\n        let kingLocation = null;\r\n        let playerPiecesArray = this.getPlayerPieces(nowPlayingPlayerNumber);\r\n        for (let i = 0; i < playerPiecesArray.length; i++)\r\n        {\r\n            let curPiece = playerPiecesArray[i];\r\n\r\n            if (curPiece.constructor.name === 'King')\r\n            {\r\n                kingLocation = curPiece.getCurrentLocation();\r\n                break;\r\n            }\r\n        }\r\n        let enemyPiecesArray;\r\n        if (nowPlayingPlayerNumber === PlayerSpecifier.FIRST)\r\n        {\r\n            enemyPiecesArray = this.secondPlayerPieces;\r\n        }\r\n        else\r\n        {\r\n            enemyPiecesArray = this.firstPlayerPieces;\r\n        }\r\n        for(let i = 0; i < enemyPiecesArray.length; i++)\r\n        {\r\n            let enemyPiece = enemyPiecesArray[i];\r\n            let currentEnemyPiecePossibleMoves = enemyPiece.possiblePieceMoves(this);\r\n            for (let j = 0; j < currentEnemyPiecePossibleMoves.length; j++)\r\n            {\r\n                let possibleMoveLocation = currentEnemyPiecePossibleMoves[j];\r\n                if (possibleMoveLocation.isIdenticalPair(kingLocation))\r\n                {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport \"./Board.css\"\r\nimport Tile from \"./Tile\";\r\nimport {PlayerSpecifier} from \"../pages/logic/PlayerSpecifier\";\r\nimport { GameBoard } from '../pages/logic/GameBoard';\r\n\r\nconst cols = ['1', '2', '3', '4', '5', '6', '7', '8'];\r\n    const rows = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\r\n\r\n\r\nconst board = () => {\r\n\r\n    let gameBoard = new GameBoard().gameBoard;\r\n    let graphicBoard = []\r\n    for(let j = 0; j < cols.length; j++)\r\n    {\r\n        for(let i = 0; i < rows.length; i++)\r\n        {\r\n            let image;\r\n            if (gameBoard[j][i] === null)\r\n            {\r\n                image = null;\r\n            }\r\n            else if(gameBoard[j][i].playerNumber === PlayerSpecifier.FIRST)\r\n            {\r\n                if (gameBoard[j][i].constructor.name === 'Pawn')\r\n                {\r\n                    image = \"icons/pawn_w.png\";\r\n                }\r\n                if (gameBoard[j][i].constructor.name === 'Knight')\r\n                {\r\n                    image = \"icons/knight_w.png\";\r\n                }\r\n                if (gameBoard[j][i].constructor.name === 'Bishop')\r\n                {\r\n                    image = \"icons/bishop_w.png\";\r\n                }\r\n                if (gameBoard[j][i].constructor.name === 'Rook')\r\n                {\r\n                    image = \"icons/rook_w.png\";\r\n                }\r\n                if (gameBoard[j][i].constructor.name === 'Queen')\r\n                {\r\n                    image = \"icons/queen_w.png\";\r\n                }\r\n                if (gameBoard[j][i].constructor.name === 'King')\r\n                {\r\n                    image = \"icons/king_w.png\";\r\n                }\r\n            }\r\n\r\n            else\r\n            {\r\n                if (gameBoard[j][i].constructor.name === 'Pawn')\r\n                {\r\n                    image = \"icons/pawn_b.png\";\r\n                }\r\n                if (gameBoard[j][i].constructor.name === 'Knight')\r\n                {\r\n                    image = \"icons/knight_b.png\";\r\n                }\r\n                if (gameBoard[j][i].constructor.name === 'Bishop')\r\n                {\r\n                    image = \"icons/bishop_b.png\";\r\n                }\r\n                if (gameBoard[j][i].constructor.name === 'Rook')\r\n                {\r\n                    image = \"icons/rook_b.png\";\r\n                }\r\n                if (gameBoard[j][i].constructor.name === 'Queen')\r\n                {\r\n                    image = \"icons/queen_b.png\";\r\n                }\r\n                if (gameBoard[j][i].constructor.name === 'King')\r\n                {\r\n                    image = \"icons/king_b.png\";\r\n                }\r\n            }\r\n            graphicBoard.push(<Tile number={i + j + 2} img={image}></Tile>)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className='chess-board'>\r\n            {graphicBoard}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default board;","import Header from \"../components/Header\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"../components/TitleStyling.css\";\r\nimport Board from \"../components/Board\";\r\nimport {Game} from \"./logic/Game\";\r\n\r\nconst PracticePage = () => {\r\n\r\n    const history = useHistory();\r\n\r\n    let side = history.location.state.side;\r\n    if (side === '1' || side === '')\r\n    {\r\n        side = 'white';\r\n    }\r\n    if (side === '2')\r\n    {\r\n        side = 'black';\r\n    }\r\n    \r\n    let time = history.location.state.time;\r\n\r\n    if (time === '')\r\n    {\r\n        time=parseInt('10');\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Header></Header>\r\n            <div className='board'>\r\n            <Board></Board>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PracticePage;","import Header from \"../components/Header\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport \"../components/TitleStyling.css\";\r\n\r\nconst NewGamePage = () => {\r\n    const history = useHistory();\r\n\r\n    let side = history.location.state.side;\r\n    if (side === '1' || side === '')\r\n    {\r\n        side = 'white';\r\n    }\r\n    if (side === '2')\r\n    {\r\n        side = 'black';\r\n    }\r\n\r\n    let time = history.location.state.time;\r\n    let level = history.location.state.level;\r\n\r\n    if (time === '')\r\n    {\r\n        time=parseInt('10');\r\n    }\r\n\r\n    if (level === '')\r\n    {\r\n        level=parseInt('5');\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Header></Header>\r\n            <div className='sub-title'>{side}</div>\r\n            <div className='sub-title'>{time}</div>\r\n            <div className='sub-title'>{level}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewGamePage;","import \"./TitleStyling.css\";\r\nimport { FaGithub, FaLinkedin } from \"react-icons/fa\";\r\n\r\nconst GitLinkedButtons = () => {\r\n\r\n    const GitClickHandler = () => {\r\n        window.open(\"https://github.com/kaveh-ofek\", \"_blank\");\r\n    }\r\n\r\n    const LinkedClickHandler = () => {\r\n        window.open(\"https://www.linkedin.com/in/ofekkaveh/\", \"_blank\");\r\n    }\r\n\r\n  return (\r\n    <div>\r\n      <button\r\n        className=\"icon-button__git\"\r\n        style={{\r\n          position: \"absolute\",\r\n          left: \"53%\",\r\n          top: \"62%\",\r\n          transform: \"translate(-50%, -50%)\",\r\n        }} onClick={GitClickHandler}\r\n      >\r\n        <FaGithub color=\"white\" size=\"2rem\"></FaGithub>\r\n      </button>\r\n      <button\r\n        className=\"icon-button__linked\"\r\n        style={{\r\n          position: \"absolute\",\r\n          left: \"47%\",\r\n          top: \"62%\",\r\n          transform: \"translate(-50%, -50%)\",\r\n        }} onClick={LinkedClickHandler}\r\n      >\r\n        <FaLinkedin color=\"white\" size=\"2rem\"></FaLinkedin>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GitLinkedButtons;\r\n","import Header from \"../components/Header\";\r\nimport GitLinkedButtons from \"../components/GitLinkedButtons\";\r\n\r\nconst AboutMePage = () => {\r\n    return (\r\n        <div>\r\n            <Header></Header>\r\n            <div className='first-about-me'>Hi</div>\r\n            <div className='introduction'>It's Ofek</div>\r\n            <div className='introduction'>I Am a 3rd Year Computer Science With Minor In Biology Student At The Hebrew University Of Jerusalem</div>\r\n            <div className='introduction'>This Is My First Ever React.js Project So I Hope You Enjoy!</div>\r\n            <div className='introduction'>If You Wanna See More:</div>\r\n            <GitLinkedButtons></GitLinkedButtons>\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default AboutMePage;","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport WelcomePage from \"./pages/WelcomePage\";\r\nimport PracticeSettingsPage from \"./pages/PracticeSettingsPage\";\r\nimport NewGameSettingsPage from \"./pages/NewGameSettingsPage\";\r\nimport PracticePage from \"./pages/PracticePage\";\r\nimport NewGamePage from \"./pages/NewGamePage\";\r\nimport AboutMePage from \"./pages/AboutMePage\";\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div>\r\n      <Route path='/' exact>\r\n      <Redirect to='/welcome'></Redirect>\r\n      </Route>\r\n      <Route path='/welcome'>\r\n      <WelcomePage></WelcomePage>\r\n      </Route>\r\n      <Route path='/practice_settings'>\r\n        <PracticeSettingsPage></PracticeSettingsPage>\r\n      </Route>\r\n      <Route path='/newgame_settings'>\r\n        <NewGameSettingsPage></NewGameSettingsPage>\r\n      </Route>\r\n      <Route path='/practice'>\r\n        <PracticePage></PracticePage>\r\n      </Route>\r\n      <Route path='/newgame'>\r\n        <NewGamePage></NewGamePage>\r\n      </Route>\r\n      <Route path='/aboutme'>\r\n        <AboutMePage></AboutMePage>\r\n      </Route>\r\n      <Route path='*'>\r\n      <Redirect to='/welcome'></Redirect>\r\n      </Route>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n<BrowserRouter> <App /> </BrowserRouter>, document.getElementById('root'));\r\n"],"sourceRoot":""}